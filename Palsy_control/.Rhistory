ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
ggh4x::facet_nested(Video.set ~ Video.emotion, switch="y") +
geom_point(alpha = 0.5, show.legend = TRUE, size = 3) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300))+
guides(shape = guide_legend(title = "Pt.group")) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
strip.text.y = element_text(size = 20, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
facet_grid(Wheel.name ~ Video.set)+
guides(color = guide_legend(title = "Group"),
shape = guide_legend(title = "Group"))
plot_gew_legend_neutral <- cowplot::plot_grid(neutral_plot, gew_legend, labels = "AUTO")
# Responses Plots Gw1 & Gw2
plot_gew_legend_neutral
plot_gew_emotions_gw1 <- dataset_full %>%
filter(Video.emotion != "neutrality", Wheel.task == "task", Wheel.name == "GW1") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
geom_point(alpha = 0.5, size = 1) +
ggh4x::facet_nested(  Video.emotion + Video.set  ~  Pt.match) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300)) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 10, face = "bold"),
strip.text.y = element_text(size = 10, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
scale_fill_manual(values = c("NA", "white"))
plot_gew_emotions_gw2 <- dataset_full %>%
filter(Video.emotion != "neutrality", Wheel.task == "task", Wheel.name == "GW2") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
geom_point(alpha = 0.5, size = 1) +
ggh4x::facet_nested(  Video.emotion + Video.set  ~  Pt.match) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300)) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 10, face = "bold"),
strip.text.y = element_text(size = 10, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
scale_fill_manual(values = c("NA", "white"))
plot_gew_emotions_gw1
###########################################################################
#
#  Experiment:  CARIPARO
#  Programmer:  QUETTIER THOMAS
#  Date:        23/08/2022
#  Description: Generate the dataset from Gorilla
#  Experiment:  Palsycontrol
#
#  Update:      03/06/2023
###########################################################################
rm(list=ls()) # remove all objects
# Load custom functions using devtools package
devtools::load_all()
# Files are .csv placed in the "original_data" folder
folder_dir<-  file.path("original_data")
filetask<-list.files(folder_dir,pattern= 'task') # from gorilla
fileq<-list.files(folder_dir,pattern= 'questionnaire') # from gorilla
filedemo<-list.files(folder_dir,pattern= 'pazienti')
# Concatenate all files from Psychopy
temp <- read.csv(file.path(folder_dir,filetask), sep=",", header=TRUE,stringsAsFactors = FALSE)
# Create the "task" sub_dataset
dataset<-temp%>%
filter(Response == "click"| Zone.Type ==  "timelimit_screen")%>%
dplyr::select( "Local.Date", "Trial.Number","Participant.Public.ID" ,
"Screen.Name", "Reaction.Time", "X.Coordinate", "Y.Coordinate", "display",
"Videos", "intensity", "file_gender", "emotion", "identity")%>%
'colnames<-'(c("Exp.date", "Exp.trial", "Pt.code",
"Wheel.name", "Resp.rt", "Wheel.x", "Wheel.y", "Wheel.task",
"Video.name", "Video.intensity", "Video.gender", "Video.emotion", "Video.id"))
# Load the Demographic Dataset from the Google Sheet
demographic <- read.csv(file.path(folder_dir,filedemo), sep=";", header=TRUE,stringsAsFactors = FALSE,na.strings= "aa")
# Combine the Psychopy and Demographic datasets using Pt.code as the key
temp <- left_join(dataset, demographic, by = "Pt.code")
# Create the "data_full" dataset by combining "Pct", "Gw1" and "Gw2" and set the vars types
dataset <- temp%>%
mutate(Wheel.y = Wheel.y - 300,
Wheel.y = Wheel.y * -1,  # flipping the y coordinates because gorilla use the upper left origin
Wheel.x = Wheel.x - 300,
Exp.date = strptime(Exp.date, format = "%d/%m/%Y %H:%M:%S"),
Exp.date = as.Date(Exp.date, format = "%Y_%b_%d"),
Exp.trial = as.numeric(Exp.trial),
Pt.code = as.factor(Pt.code),
Pt.gender = factor(Pt.gender, levels = c("female","male")),
Pt.group = factor(Pt.group, levels = c("control","palsy")),
Pt.study = as.numeric(Pt.study),
Pt.age = as.numeric(Pt.age),
Wheel.name = factor(Wheel.name, levels = c("GW1","GW2")),
Wheel.task = ifelse(Wheel.task == "practice", "practice", "task"),
Wheel.task = as.factor(Wheel.task),
Resp.rt = replace_na(Resp.rt, 19999),
Video.set = ifelse(Video.intensity == "full", "ADFES", "JeFEE"),
Video.set = factor(Video.set, levels = c("ADFES", "JeFEE")),
Video.gender = ifelse(Video.gender == "femmina", "female", "male"),
Video.gender = as.factor(Video.gender),
Video.name = as.factor(Video.name),
Video.emotion = case_when(
Video.emotion == "angry" ~ "anger",
Video.emotion == "disgusted" ~ "disgust",
Video.emotion == "fear" ~ "fear",
Video.emotion == "happy" ~ "happiness",
Video.emotion == "neutral" ~ "neutrality",
Video.emotion == "sad" ~ "sadness",
Video.emotion == "surprised" ~ "surprise",
Video.emotion == "anger" ~ "anger",
Video.emotion == "disgust" ~ "disgust",
Video.emotion == "fear" ~ "fear",
Video.emotion == "joy" ~ "happiness",
Video.emotion == "neutral" ~ "neutrality",
Video.emotion == "sadness" ~ "sadness",
Video.emotion == "surprise" ~ "surprise"),
Video.emotion = factor(Video.emotion, levels = c("surprise","anger", "disgust", "sadness", "fear", "happiness", "neutrality")),
Video.id = as.factor(Video.id)
) %>%
arrange(Pt.id, Exp.trial) %>%
dplyr::select(-c( Video.intensity))
# Setting the circular Coordinates
temp <- dataset %>%
mutate(x_cen = Wheel.x,
y_cen = Wheel.y,
Resp.intensity = calc_dist(point_x = x_cen, point_y = y_cen),
x_cen = ifelse(x_cen == 0, x_cen + 0.0001, x_cen),
y_cen = ifelse(y_cen == 0, y_cen + 0.0001, y_cen),
theta = atan(y_cen/x_cen),
theta = correct_angle(theta, x_cen, y_cen), # correcting for quadrant
degree = round(rad_to_deg(theta),2)) # convert to degrees
# Here we create a dataframe with the "correct" value for each emotion. In this way
# we can calculate the difference between the pressed angle and the correct one
coords <- tibble(
emotion = c("satisfaction", "happiness", "elation", "pride", "anger", "contempt",
"disgust", "envy", "guilt", "shame", "fear", "sadness", "surprise",
"interest", "hope", "relief")
)
coords <- coords %>%
mutate(theta_emo = (2 * 0:(nrow(.) - 1) * pi)/nrow(.), # see https://math.stackexchange.com/a/206662
theta_emo = theta_emo + deg_to_rad((360/nrow(.))/2), # adding the shift for centering emotions
x_emo = 300 * cos(theta_emo),
y_emo = 300 * sin(theta_emo),
degree_emo = rad_to_deg(theta_emo))
#Calculate coordinates for radial lines
coords$end_x <- cos(coords$degree_emo * pi / 180)
coords$end_y <- sin(coords$degree_emo * pi / 180)
# Create a circular plot with radial lines and labels
plot <- ggplot(coords) +
geom_segment(aes(x = 0, y = 0, xend = end_x, yend = end_y), color = "steelblue", size = 1) +
geom_text(aes(x = 1.1 * end_x, y = 1.1 * end_y, label = emotion), size = 4, color = "black") +
geom_text(aes(x = 1.5 * end_x, y = 1.5 * end_y, label = degree_emo), size = 4, color = "black") +
coord_fixed() +
labs(x = NULL, y = NULL) +
ggtitle("Degrees of Emotion") +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
# assigning order to coord
coords$order <- c(4, 3, 2, 1, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)
coords$emo_order <- coords$emotion[coords$order]
# insert Wheel.angle referenses in dataset
names(coords$degree_emo) <- coords$emotion # renaming for expanding
temp$Wheel.angle <- coords$degree_emo[match(temp$Video.emotion, coords$emotion)]
# Adding variables
# 1 the angular difference between the angle reference and the pressed angle.
# 2 categorical GEW responses
temp <- temp %>%
mutate(emotion = Video.emotion ,
Resp.angle = degree,
Resp.diff = ang_diff(Wheel.angle, Resp.angle),
Resp.diff = unname(Resp.diff),
Wheel.angle = unname(Wheel.angle),
Resp.category = seg_position(round(degree, 1)),
Resp.category = factor(Resp.category,levels = c(coords$emo_order,"no resp")),
Resp.level = level_int_position(Resp.intensity),
Resp.level = factor(Resp.level),
Pt.code = factor(Pt.code),
Resp.correct = ifelse(as.character(Video.emotion) == as.character(Resp.category), 1, 0),
Resp.correct = ifelse(Wheel.name == "GW2", NA, Resp.correct))%>%
dplyr::select(-c("x_cen","y_cen", "degree", "emotion","theta" ))#%>%
#drop_na(Wheel.x)
# Arrange column order by names
dataset_full <- temp[ , rev(order(names(temp)))]
# select sub_datasets
dataset_gw1 <- dataset_full %>%
filter(Wheel.task == "task", Wheel.name == "GW1" ,Video.emotion != "neutrality")
dataset_neutral <- dataset_full %>%
filter(Wheel.task == "task", Wheel.name == "GW1" ,Video.emotion == "neutrality")
# Saving
save(coords,dataset_full,dataset_gw1,dataset_neutral,file = file.path("objects", "palsy_circular.RData"))
#################################################
#
# END
#
################################ dataset_builder
###########################################################################
#
#  Experiment:  CARIPARO
#  Programmer:  QUETTIER THOMAS
#  Date:        04/06/2023
#     This script performs data analysis for the CARIPARO experiment,
#     specifically for the Accuracy measure of the CPO_palsy_AMIM1 experiment.
#     It computes datasets, generates plots, tables, and fits a
#     mixed-effects model to analyze the response Accuracy.
#
#  Experiment CPO_palsy_AMIM1
#
#  Update:      04/06/2023
###########################################################################
rm(list=ls()) # remove all objects
# Functions & libraries---------------------------------------------------------------
devtools::load_all()
# Data --------------------------------------------------------------------
load(file.path("objects","palsy_circular.RData"))
table(v$Pt.code, dataset_gw1$Video.emotion)
###########################################################################
#
#  Experiment:  CARIPARO
#  Programmer:  QUETTIER THOMAS
#  Date:        04/06/2023
#     This script performs data analysis for the CARIPARO experiment,
#     specifically for the Accuracy measure of the CPO_palsy_AMIM1 experiment.
#     It computes datasets, generates plots, tables, and fits a
#     mixed-effects model to analyze the response Accuracy.
#
#  Experiment CPO_palsy_AMIM1
#
#  Update:      04/06/2023
###########################################################################
rm(list=ls()) # remove all objects
# Functions & libraries---------------------------------------------------------------
devtools::load_all()
# Data --------------------------------------------------------------------
load(file.path("objects","palsy_circular.RData"))
#table(v$Pt.code, dataset_gw1$Video.emotion)
# incomplet pt.code data:
# e2wtlj1f max 34 trials subject 19 match 3
# 8ij7agah max 56 trials subject 8 match 34
dataset_gw1%>%
filter(Pt.code == "8ij7agah" | Pt.code == "e2wtlj1f")%>%
group_by(Pt.code)%>%
mutate( max.trial = max(Exp.trial))%>%
filter(Exp.trial == 2)%>%
dplyr::select(Pt.code, Pt.id, Pt.match, max.trial)
# check the numbers of responses
# dataset for flextable object
demogaphic<- dataset_gw1%>%
group_by(Pt.code)%>%
filter(row_number()==1)%>%
ungroup()%>%
dplyr::select(Pt.group,Pt.id, Pt.gender, Pt.age, Pt.study,Plsy.locus,Surg.inter,Surg.date,Asmt.sunnybrook,
Asmt.madrs.tot,Asmt.madrs.depression)%>%
'colnames<-'(c("Group","Subject","Gender","Age" ,"Education","Paralisi","Surgery","Date","Sunnybrook","Madrs",
"Depression"))
# flextable object
demogaphic_tbl_full <- demogaphic%>%
flextable() %>%
autofit() %>%
theme_vanilla() %>%
fontsize(part = "all", size = 9)%>%
merge_v(j = 1)%>%
align( part = "header", align = "left") %>%
align( part = "body", align = "center") %>%
add_header_row(colwidths = c(6, 2, 3),
values = c("Participant", "Surgery","Assesment") )
# Participants Table summary ---------------------------------------------------------------
# dataset for flextable object
demogaphic_summary <- demogaphic%>%
dplyr::select(Group,Subject,Gender,Age,Education)%>%
group_by(Group,Gender) %>%
summarise(n = n(),
Age_mean = mean(Age),
Age_Sd = sd(Age),
Education_mean = mean(Education),
Education_Sd = sd(Education))
# add total
demogaphic_tbl_summary <- rbind(demogaphic_summary[1:2,],
data.frame(Group = "control", Gender ='Sub-total',t(colSums(demogaphic_summary[1:2,3])), t(colMeans(demogaphic_summary[1:2, -c(1,2,3)]))),
demogaphic_summary[3:4,],
data.frame(Group = "moebius", Gender ='Sub-total',t(colSums(demogaphic_summary[3:4,3])), t(colMeans(demogaphic_summary[3:4, -c(1,2,3)]))),
data.frame(Group = NA, Gender ='Total',t(colSums(demogaphic_summary[,3])), t(colMeans(demogaphic_summary[, -c(1,2,3)]))))%>%
'colnames<-'(c("Group","Gender","n","Mean", "Sd","Mean ","Sd " ))%>%
flextable() %>%
autofit() %>%
theme_vanilla() %>%
fontsize(part = "all", size = 9)%>%
merge_v(j = 1)%>%
align( part = "header", align = "left") %>%
align( part = "body", align = "center")%>%
colformat_double(j = 4:7, digits = 2) %>%
align(part = "header", align = "center") %>%
align( part = "body", align = "center")%>%
add_header_row(colwidths = c(3, 2, 2),
values = c("", "Age","Education") )%>%
bold(i = c(3,6,7), bold = TRUE)
# Participants Responses Table---------------------------------------------------------------
# dataset neutral for flextable object
dat_neutral <- dataset_full%>%
filter(Wheel.task == "task",Video.emotion == "neutrality")%>%
dplyr::select(Wheel.name,Pt.code,Pt.group,Video.emotion,Video.set,Wheel.angle,Resp.angle,Resp.diff,Resp.intensity)%>%
group_by(Wheel.name,Video.emotion,Wheel.angle,Pt.group,Video.set)%>%
summarise(Resp.angle.mean = NA,
Wheel.angle.mean = NA,
Resp.angle.sd = NA,
Resp.intensity.mean = mean(Resp.intensity, na.rm=TRUE),
Resp.intensity.sd = sd(Resp.intensity, na.rm=TRUE),
Resp.diff.mean = NA,
Resp.diff.sd = NA)%>%
ungroup()%>%
dplyr::select(Wheel.name,Video.emotion,Wheel.angle.mean,
Pt.group,Video.set,
Resp.angle.mean,Resp.angle.sd,
Resp.diff.mean,Resp.diff.sd,
Resp.intensity.mean,Resp.intensity.sd)%>%
mutate(Resp.intensity.mean = round(Resp.intensity.mean,2),
Resp.intensity.sd = round(Resp.intensity.sd,2))%>%
'colnames<-'(c("GEW","Emotion","Angle reference",
"Group" ,"Set",
"Response angle", "Response variance",
"Bias","Uncertainty",
"Mean (px)", "Sd"))
# dataset nemotions for flextable object
dat_gw1 <- dataset_full%>%
filter(Wheel.task == "task",Wheel.name == "GW1",Video.emotion != "neutrality")%>%
drop_na(Resp.angle)%>%
dplyr::select(Wheel.name,Pt.code,Pt.group,Video.emotion,Video.set,Wheel.angle,Resp.angle,Resp.diff,Resp.intensity)%>%
group_by(Wheel.name,Video.emotion,Wheel.angle,Pt.group,Video.set)%>%
summarise(Resp.angle.mean = rad_to_deg(CircStats::circ.mean(Resp.angle)) %% 360,
Wheel.angle = rad_to_deg(CircStats::circ.mean(Wheel.angle)) %% 360,
Resp.angle.sd = 1 - CircStats::circ.disp(Resp.angle)$var,
Resp.intensity.mean = mean(Resp.intensity, na.rm=TRUE),
Resp.intensity.sd = sd(Resp.intensity, na.rm=TRUE),
Resp.diff.mean = rad_to_deg(CircStats::circ.mean(Resp.diff)) %% 360,
Resp.diff.sd = 1 - CircStats::circ.disp(Resp.diff)$var)%>%
ungroup()%>%
dplyr::select(Wheel.name,Video.emotion,Wheel.angle,
Pt.group,Video.set,
Resp.angle.mean,Resp.angle.sd,
Resp.diff.mean,Resp.diff.sd,
Resp.intensity.mean,Resp.intensity.sd)%>%
mutate(Wheel.angle = paste0(as.character(round(Wheel.angle,2)),"°"),
Resp.angle.mean = paste0(as.character(round(Resp.angle.mean,2)),"°"),
Resp.angle.sd = paste0(as.character(round(Resp.angle.sd,2)),"°"),
Resp.diff.mean = paste0(as.character(round(Resp.diff.mean,2)),"°"),
Resp.diff.sd = paste0(as.character(round(Resp.diff.sd,2)),"°"),
Resp.intensity.mean = round(Resp.intensity.mean,2),
Resp.intensity.sd = round(Resp.intensity.sd,2))%>%
'colnames<-'(c("GEW","Emotion","Angle reference",
"Group" ,"Set",
"Response angle", "Response variance",
"Bias","Uncertainty",
"Mean (px)", "Sd"))
# dataset nemotions for flextable object
dat_gw2 <- dataset_full%>%
filter(Wheel.task == "task",Wheel.name == "GW2" ,Video.emotion != "neutrality")%>%
drop_na(Resp.angle)%>%
dplyr::select(Wheel.name,Pt.code,Pt.group,Video.emotion,Video.set,Wheel.angle,Resp.angle,Resp.diff,Resp.intensity)%>%
group_by(Wheel.name,Video.emotion,Wheel.angle,Pt.group,Video.set)%>%
summarise(Resp.angle.mean = rad_to_deg(CircStats::circ.mean(Resp.angle)) %% 360,
Wheel.angle.mean = "0°",
Resp.angle.sd = 1 - CircStats::circ.disp(Resp.angle)$var,
Resp.intensity.mean = mean(Resp.intensity, na.rm=TRUE),
Resp.intensity.sd = sd(Resp.intensity, na.rm=TRUE),
Resp.diff.mean = NA,
Resp.diff.sd = NA)%>%
ungroup()%>%
dplyr::select(Wheel.name,Video.emotion,Wheel.angle.mean,
Pt.group,Video.set,
Resp.angle.mean,Resp.angle.sd,
Resp.diff.mean,Resp.diff.sd,
Resp.intensity.mean,Resp.intensity.sd)%>%
mutate(Resp.angle.mean = paste0(as.character(round(Resp.angle.mean,2)),"°"),
Resp.angle.sd = paste0(as.character(round(Resp.angle.sd,2)),"°"),
Resp.intensity.mean = round(Resp.intensity.mean,2),
Resp.intensity.sd = round(Resp.intensity.sd,2))%>%
'colnames<-'(c("GEW","Emotion","Angle reference",
"Group" ,"Set",
"Response angle", "Response variance",
"Bias","Uncertainty",
"Mean (px)", "Sd"))
Responses_table <- rbind(dat_neutral,dat_gw1,dat_gw2)%>%
arrange(GEW,Emotion,Group,Set)%>%
flextable() %>%
autofit() %>%
theme_vanilla() %>%
fontsize(part = "all", size = 9)%>%
merge_v(j = c(1:5))%>%
add_header_row(colwidths = c(5, 4,2),
values = c("Genova Emotion Wheel","Responses", "Perceived Intensity") )%>%
align(align = "center", part = "all")
# neutral resp & GEW Plots ---------------------------------------------------------------
bg <- magick::image_read("files/gew_low_res.png")
bg <- magick::image_modulate(bg, brightness = 80)
gew_legend <- coords %>%
mutate(mask = "Legend",
flip = ifelse(x_emo < 0, degree_emo + 180, degree_emo),
emotion = stringr::str_to_title(emotion)) %>%
ggplot() +
ggpubr::background_image(bg) +
geom_text(aes(x = x_emo*0.75, y = y_emo*0.75,
label = emotion,
angle = flip),
size = 5.5, fontface = "bold",
check_overlap = TRUE) +
facet_grid(. ~ mask) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
strip.text.y = element_text(size = 20, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA)) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300))
neutral_plot <- dataset_full %>%
filter(Video.emotion == "neutrality") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
ggh4x::facet_nested(Video.set ~ Video.emotion, switch="y") +
geom_point(alpha = 0.5, show.legend = TRUE, size = 3) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300))+
guides(shape = guide_legend(title = "Pt.group")) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
strip.text.y = element_text(size = 20, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
facet_grid(Wheel.name ~ Video.set)+
guides(color = guide_legend(title = "Group"),
shape = guide_legend(title = "Group"))
plot_gew_legend_neutral <- cowplot::plot_grid(neutral_plot, gew_legend, labels = "AUTO")
# Responses Plots Gw1 & Gw2 ---------------------------------------------------------------
plot_gew_emotions_gw1 <- dataset_full %>%
filter(Video.emotion != "neutrality", Wheel.task == "task", Wheel.name == "GW1") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
geom_point(alpha = 0.5, size = 1) +
ggh4x::facet_nested(  Video.emotion + Video.set  ~  Pt.match) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300)) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 10, face = "bold"),
strip.text.y = element_text(size = 10, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
scale_fill_manual(values = c("NA", "white"))
plot_gew_emotions_gw2 <- dataset_full %>%
filter(Video.emotion != "neutrality", Wheel.task == "task", Wheel.name == "GW2") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
geom_point(alpha = 0.5, size = 1) +
ggh4x::facet_nested(  Video.emotion + Video.set  ~  Pt.match) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300)) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 10, face = "bold"),
strip.text.y = element_text(size = 10, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
scale_fill_manual(values = c("NA", "white"))
# Saving
save(plot_gew_legend_neutral,plot_gew_emotions_gw1,plot_gew_emotions_gw2,gew_legend,Responses_table,demogaphic_tbl_summary,demogaphic_tbl_full,file = file.path("objects", "mbs_info.RData"))
#################################################
#
# END
#
############################### data_exploration
#################################################
#
# END
#
############################### data_exploration
plot_gew_emotions_gw1
plot_gew_emotions_gw1
save(plot_gew_legend_neutral,plot_gew_emotions_gw1,plot_gew_emotions_gw2,gew_legend,Responses_table,demogaphic_tbl_summary,demogaphic_tbl_full,file = file.path("objects", "palsy_info.RData"))
