strip.text.y = element_text(size = 20, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
facet_grid(Wheel.name ~ Video.set)+
guides(shape = guide_legend(title = "Group"))
neutral_plot
neutral_plot <- dataset_full %>%
filter(Video.emotion == "neutrality") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
ggh4x::facet_nested(Video.set ~ Video.emotion, switch="y") +
geom_point(alpha = 0.5, show.legend = TRUE, size = 3) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300))+
guides(shape = guide_legend(title = "Pt.group")) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
strip.text.y = element_text(size = 20, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
facet_grid(Wheel.name ~ Video.set)+
guides(color = guide_legend(title = "Group"))
neutral_plot
neutral_plot <- dataset_full %>%
filter(Video.emotion == "neutrality") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
ggh4x::facet_nested(Video.set ~ Video.emotion, switch="y") +
geom_point(alpha = 0.5, show.legend = TRUE, size = 3) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300))+
guides(shape = guide_legend(title = "Pt.group")) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
strip.text.y = element_text(size = 20, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
facet_grid(Wheel.name ~ Video.set)+
guides(color = guide_legend(title = "Group"),
shape = guide_legend(title = "Group"))
neutral_plot
plot_gew_legend_neutral <- cowplot::plot_grid(neutral_plot, gew_legend, labels = "AUTO")
gew_legend <- emo_coords %>%
mutate(mask = "Legend",
flip = ifelse(x_emo < 0, degree_emo + 180, degree_emo),
emotion = stringr::str_to_title(emotion)) %>%
ggplot() +
ggpubr::background_image(bg) +
geom_text(aes(x = x_emo*0.75, y = y_emo*0.75,
label = emotion,
angle = flip),
size = 5.5, fontface = "bold",
check_overlap = TRUE) +
facet_grid(. ~ mask) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
strip.text.y = element_text(size = 20, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA)) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300))
gew_legend <- coords %>%
mutate(mask = "Legend",
flip = ifelse(x_emo < 0, degree_emo + 180, degree_emo),
emotion = stringr::str_to_title(emotion)) %>%
ggplot() +
ggpubr::background_image(bg) +
geom_text(aes(x = x_emo*0.75, y = y_emo*0.75,
label = emotion,
angle = flip),
size = 5.5, fontface = "bold",
check_overlap = TRUE) +
facet_grid(. ~ mask) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
strip.text.y = element_text(size = 20, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA)) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300))
plot_gew_legend_neutral <- cowplot::plot_grid(neutral_plot, gew_legend, labels = "AUTO")
plot_gew_legend_neutral
facet_grid(Wheel.name ~ Video.set)
plot_gew_emotions <- dataset_full %>%
filter(Video.emotion != "neutrality", Wheel.task == "task") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
geom_point(alpha = 0.5, size = 1) +
ggh4x::facet_nested( Pt.group + Wheel.name  ~ emotion) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300)) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 14, face = "bold"),
strip.text.y = element_text(size = 14, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
scale_fill_manual(values = c("NA", "white"))+
facet_grid(Wheel.name ~ Video.set)
plot_gew_emotions
plot_gew_emotions <- dataset_full %>%
filter(Video.emotion != "neutrality", Wheel.task == "task") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
geom_point(alpha = 0.5, size = 1) +
ggh4x::facet_nested( Pt.group + Wheel.name  ~ emotion) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300)) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 14, face = "bold"),
strip.text.y = element_text(size = 14, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
scale_fill_manual(values = c("NA", "white"))+
facet_grid(Wheel.name ~ Video.set*Video.emotion)
plot_gew_emotions
dataset_full %>%
filter(Video.emotion != "neutrality", Wheel.task == "task") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
geom_point(alpha = 0.5, size = 1) +
ggh4x::facet_nested( Pt.group + Wheel.name + Video.emotion  ~ emotion) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300)) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 14, face = "bold"),
strip.text.y = element_text(size = 14, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
scale_fill_manual(values = c("NA", "white"))
plot_gew_emotions <- dataset_full %>%
filter(Video.emotion != "neutrality", Wheel.task == "task") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
geom_point(alpha = 0.5, size = 1) +
ggh4x::facet_nested( Pt.group + Wheel.name + Wheel.name  ~ Video.emotion) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300)) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 14, face = "bold"),
strip.text.y = element_text(size = 14, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
scale_fill_manual(values = c("NA", "white"))
plot_gew_emotions
dataset_full %>%
filter(Video.emotion != "neutrality", Wheel.task == "task") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
geom_point(alpha = 0.5, size = 1) +
ggh4x::facet_nested( Pt.group + Wheel.name  ~ Video.emotion) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300)) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 14, face = "bold"),
strip.text.y = element_text(size = 14, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
scale_fill_manual(values = c("NA", "white"))
plot_gew_emotions <- dataset_full %>%
filter(Video.emotion != "neutrality", Wheel.task == "task") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
geom_point(alpha = 0.5, size = 1) +
ggh4x::facet_nested( Video.set + Wheel.name  ~ Video.emotion) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300)) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 14, face = "bold"),
strip.text.y = element_text(size = 14, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
scale_fill_manual(values = c("NA", "white"))
plot_gew_emotions
plot_gew_emotions <- dataset_full %>%
filter(Video.emotion != "neutrality", Wheel.task == "task", Pt.code != "10_moebius") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
geom_point(alpha = 0.5, size = 1) +
ggh4x::facet_nested( Video.set + Wheel.name  ~ Video.emotion) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300)) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 14, face = "bold"),
strip.text.y = element_text(size = 14, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
scale_fill_manual(values = c("NA", "white"))
flexplot(int_mean~emotion+group |  video_set,
spread = "stdev", # sterr, stdev,
data = intensity_mean,
alpha = 0.07) +
theme(legend.position = "bottom") +
ylab("Perceived intensity (px)") +
xlab("")
full_emotion_plot<- flexplot(intensity~emotion+group |  video_set,
spread = "stdev", # sterr, stdev,
data = intensity_mean,
alpha = 0.07) +
theme(legend.position = "bottom") +
ylab("Perceived intensity (px)") +
xlab("")
full_emotion_plot
# Fit linear mixed-effects model
fit <- lmer(correct ~ emotion * group * video_set,
data = intensity_mean%>%filter(correct == 1))
intensity_mean <-  dataset_gw1 %>%
dplyr::select(Pt.code,  Video.set, Video.emotion, Pt.group, Resp.intensity, Resp.correct) %>%
'colnames<-'(c("subject" ,"video_set", "emotion", "group", "intensity","correct"))%>%
filter(subject != "10_moebius") # no match
# Fit linear mixed-effects model
fit <- lmer(correct ~ emotion * group * video_set,
data = intensity_mean%>%filter(correct == 1))
# Fit linear mixed-effects model
fit <- lmer(correct ~ emotion * group * video_set + (1|subject),
data = intensity_mean%>%filter(correct == 1))
datafit <- intensity_mean%>%filter(correct == 1)%>%
group_by(subject, group, emotion, video_set, correct) %>%
summarise(intensity = mean(intensity)) %>%
drop_na(int_mean)
datafit <- intensity_mean%>%filter(correct == 1)%>%
group_by(subject, group, emotion, video_set, correct) %>%
summarise(intensity = mean(intensity, na.rm = TRUE))
datafit
fit <- lmer(correct ~ emotion * group * video_set + (1|subject),
data = datafit)
View(datafit)
datafit <- intensity_mean%>%filter(correct == 1)%>%
group_by(subject, group, emotion, video_set, correct) %>%
summarise(intensity = mean(intensity, na.rm = TRUE))%>%
drop_na(intensity)
fit <- lmer(correct ~ emotion * group * video_set + (1|subject),
data = datafit)
table(datafit$emotion, datafit$subject)
datafit <- intensity_mean%>%filter(correct == 1)
datafit <- intensity_mean%>%filter(correct == 1)
table(datafit$emotion, datafit$subject)
datafit <- intensity_mean%>%filter(correct == 1)%>%
group_by(subject, group, emotion, video_set) %>%
summarise(intensity = mean(intensity, na.rm = TRUE))
table(datafit$emotion, datafit$subject)
fit <- lmer(correct ~ emotion * group * video_set + (1|subject),
data = datafit)
datafit <- intensity_mean%>%filter(correct == 1)
fit <- lmer(intensity ~ emotion * group * video_set + (1|subject),
data = datafit)
# Generate table summary
table <- tab_model(fit) #, show.df = FALSE, string.p = "p adjusted", p.adjust = "bonferroni")
table
chiquadro <- car::Anova(fit, type = 3)
chi_table <- chiquadro %>%
drop_na(`Pr(>Chisq)`) %>%
mutate(`Pr(>Chisq)` = round(`Pr(>Chisq)`, 3)) %>%
kbl(caption = "Anova(model, type = 3)") %>%
column_spec(4, color = ifelse(chiquadro$`Pr(>Chisq)` <= 0.05, "red", "black")) %>%
kable_classic(full_width = F, html_font = "Cambria")
chi_table
temp<-rbind(slice(emotion, 1:(n() - 1)) ,
slice(video, 1:(n() - 1)))
contrast<-temp%>%
drop_na(`Pr(>Chisq)`) %>%
mutate(`Pr(>Chisq)` = round(`Pr(>Chisq)`, 3)) %>%
kbl(caption = "Contrasts (FDR corrected)") %>%
column_spec(5, color = ifelse(temp$`Pr(>Chisq)` <= 0.05, "red", "black")) %>%
kable_classic(full_width = F, html_font = "Cambria")
temp<-rbind(slice(emotion, 1:(n() - 1)) ,
slice(video, 1:(n() - 1)))
emotion <- testInteractions(fit, pairwise = "emotion", adjustment = "fdr")
video<- testInteractions(fit, pairwise = "video_set", adjustment = "fdr")
# data table of contrast
temp<-rbind(slice(emotion, 1:(n() - 1)) ,
slice(video, 1:(n() - 1)))
# kable table object
contrast<-temp%>%
drop_na(`Pr(>Chisq)`) %>%
mutate(`Pr(>Chisq)` = round(`Pr(>Chisq)`, 3)) %>%
kbl(caption = "Contrasts (FDR corrected)") %>%
column_spec(5, color = ifelse(temp$`Pr(>Chisq)` <= 0.05, "red", "black")) %>%
kable_classic(full_width = F, html_font = "Cambria")
contrast
#explorative plots
emotion <- flexplot(correct~emotion | video_set*group, data= x)
#explorative plots
emotion <- flexplot(intensity~emotion*group*video_set, data= intensity_mean%>%filter(correct == 1))
flexplot(intensity~emotion*group*video_set, data= intensity_mean%>%filter(correct == 1))
#explorative plots
emotion <- flexplot(intensity~emotion*group*video_set, data= fit)
emotion <- flexplot(intensity~1, data= x)
#explorative plots
x <- intensity_mean%>%filter(correct == 1)
emotion <- flexplot(intensity~1, data= x)
emotion
?flexplot
emotion <- flexplot(intensity~group + emotion + video_set, data= x)
emotion
emotion <- flexplot(intensity~ emotion + group + video_set, data= x)
emotion
emotion <- flexplot(intensity~ emotion + group | video_set, data= x)
emotion
emotion <- flexplot(intensity~ emotion, data= x)
emotion
emotion <- flexplot(intensity~ emotion + group | video_set, data= x,
plot.type = c("histogram", "qq", "density"))
visualize(fit, plot = "residuals")
themeperso <- theme_paper(font_size = 10) +
theme(legend.position = "bottom")
plotemotion <- ggpredict(fit, terms = c( "emotion"))%>%
plot()+
labs(title = "Main effect emotion",
x = "Emotions",
y = "Accuracy") +
themeperso
plotvideo <- ggpredict(fit, terms = c( "video_set"))%>%
plot()+
labs(title = "Main effect Video set",
x = "Emotions",
y = "Accuracy") +
themeperso
ploteffect<-cowplot::plot_grid(plotemotion,
plotvideo,
ncol = 1,
scale = c(.9, .9, .9, .9,.9))
ploteffect<-ploteffect<-cowplot::plot_grid(plotemotion,
plotvideo,
ncol = 1,
scale = c(.9, .9, .9, .9,.9))
ploteffect<-ploteffect<-cowplot::plot_grid(plotemotion,
plotvideo,
ncol = 1,
scale = c(.9, .9, .9, .9,.9))
ploteffect
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
load("../models/perceived_intensity.RData")
###########################################################################
#
#  Experiment:  CARIPARO
#  Programmer:  QUETTIER THOMAS
#  Date:        0382022
#     This script performs data analysis for the CARIPARO experiment,
#     specifically for the Accuracy measure of the MBScontrol experiment.
#     It computes datasets, generates plots, tables, and fits a
#     mixed-effects model to analyze the response Perceived intensity.
#
#  Experiment   MBScontrol
#
#  Update:      23/05/2023
###########################################################################
rm(list=ls()) # remove all objects
# Functions & libraries---------------------------------------------------------------
devtools::load_all()
# Data --------------------------------------------------------------------
load(file.path("objects","mbs_circular.RData"))
# Calculate mean intensity
intensity_mean <-  dataset_gw1 %>%
dplyr::select(Pt.code,  Video.set, Video.emotion, Pt.group, Resp.intensity, Resp.correct) %>%
'colnames<-'(c("subject" ,"video_set", "emotion", "group", "intensity","correct"))%>%
filter(subject != "10_moebius") # no match
# Calculate intensity mean for neutral dataset
dat_neutral <- dataset_neutral %>%
dplyr::select(Pt.code,  Video.set, Video.emotion, Pt.group, Resp.intensity) %>%
'colnames<-'(c("subject" ,"video_set", "emotion", "group", "intensity"))%>%
filter(subject != "10_moebius") # no match
# Generate a table summarizing the intensities
table_intensity <- intensity_mean%>%
group_by(group,emotion, video_set) %>%
summarise(intensity = mean(intensity, na.rm = TRUE)) %>%
pivot_wider(names_from = emotion, values_from = intensity) %>%
flextable() %>%
colformat_double(digits = 2) %>%
autofit() %>%
merge_v(j = 1:2) %>%
theme_vanilla() %>%
align(align = "center")
# Generate aplot for emotions intensities
plot_emotion<- flexplot(intensity~emotion+group |  video_set,
spread = "stdev", # sterr, stdev,
data = intensity_mean,
alpha = 0.07) +
theme(legend.position = "bottom") +
ylab("Perceived intensity (mean & Sd in px)") +
xlab("")
# Fit  correct for each emotion--------------------------------------------
# Fit linear mixed-effects model
fit <- lmer(intensity ~ emotion * group * video_set + (1|subject),
data = intensity_mean%>%filter(correct == 1))
# Generate table summary
table <- tab_model(fit) #, show.df = FALSE, string.p = "p adjusted", p.adjust = "bonferroni")
visualize(fit, plot = "residuals")
# Create ANOVA table
# Perform ANOVA
chiquadro <- car::Anova(fit, type = 3)
chi_table <- chiquadro %>%
drop_na(`Pr(>Chisq)`) %>%
mutate(`Pr(>Chisq)` = round(`Pr(>Chisq)`, 3)) %>%
kbl(caption = "Anova(model, type = 3)") %>%
column_spec(4, color = ifelse(chiquadro$`Pr(>Chisq)` <= 0.05, "red", "black")) %>%
kable_classic(full_width = F, html_font = "Cambria")
#Contrasts
emotion <- testInteractions(fit, pairwise = "emotion", adjustment = "fdr")
video<- testInteractions(fit, pairwise = "video_set", adjustment = "fdr")
# data table of contrast
temp<-rbind(slice(emotion, 1:(n() - 1)) ,
slice(video, 1:(n() - 1)))
# kable table object
contrast<-temp%>%
drop_na(`Pr(>Chisq)`) %>%
mutate(`Pr(>Chisq)` = round(`Pr(>Chisq)`, 3)) %>%
kbl(caption = "Contrasts (FDR corrected)") %>%
column_spec(5, color = ifelse(temp$`Pr(>Chisq)` <= 0.05, "red", "black")) %>%
kable_classic(full_width = F, html_font = "Cambria")
# Generate plot
themeperso <- theme_paper(font_size = 10) +
theme(legend.position = "bottom")
plotemotion <- ggpredict(fit, terms = c( "emotion"))%>%
plot()+
labs(title = "Main effect emotion",
x = "Emotions",
y = "Accuracy") +
themeperso
plotvideo <- ggpredict(fit, terms = c( "video_set"))%>%
plot()+
labs(title = "Main effect Video set",
x = "Emotions",
y = "Accuracy") +
themeperso
ploteffect<-ploteffect<-cowplot::plot_grid(plotemotion,
plotvideo,
ncol = 1,
scale = c(.9, .9, .9, .9,.9))
# Save the results
save(fit, table, chi_table, contrast, ploteffect,table_accuracy, plot_freq_gw1, plot_freq_gw2,  file = file.path("models/perceived_intensity.RData"))
save(fit, table, chi_table, contrast, ploteffect,table_intensity, plot_emotion,  file = file.path("models/perceived_intensity.RData"))
load("../models/perceived_intensity.RData")
###########################################################################
#
#  Experiment:  CARIPARO
#  Programmer:  QUETTIER THOMAS
#  Date:        03/06/2023
#  Description: General script
#  Experiment   MBScontrol
#
#  Update:      03/06/2023
###########################################################################
rm(list=ls()) # remove all objects
# Functions ---------------------------------------------------------------
devtools::load_all()
# set folders structure for analysis --------------------------------------
create_dir_structure()
# usethis::use_description()
# Pre-processing-----------------------------------------------------------
# you will find dataset description in /docs/Dataset_description.html
run_script("scripts/01_dataset_builder.R")
# statistics
run_script("scripts/02_accuracy.R") # accuracy
run_script("scripts/02_perceived_intensity.R") # acc
