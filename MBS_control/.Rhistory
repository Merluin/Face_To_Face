# Perform ANOVA
chiquadro <- car::Anova(fit, test.statistic= "Chisq", type = "3") # test.statistic=c("Chisq", "F")
chi_table <- chiquadro %>%
drop_na(`Pr(>Chisq)`) %>%
mutate(`Pr(>Chisq)` = round(`Pr(>Chisq)`, 3)) %>%
kbl(caption = "Anova(model, type = 3)") %>%
column_spec(4, color = ifelse(chiquadro$`Pr(>Chisq)` <= 0.05, "red", "black")) %>%
kable_classic(full_width = F, html_font = "Cambria")
chi_table
# Fit linear mixed-effects model
fit <- lmer(score ~ Pt.group * lpost + (1|Pt.code),
data = lpost_data%>%filter(Pt.code != "10_control" & lpost != "Asmt.lpost.tot"))
# Create ANOVA table
# Perform ANOVA
chiquadro <- car::Anova(fit, test.statistic= "Chisq", type = "3") # test.statistic=c("Chisq", "F")
chiquadro
fit9 <- lmer(score ~ Pt.group + (1|Pt.code),
data = lpost_data%>%filter(Pt.code != "10_control" & lpost == "Asmt.lpost.9"))
fit9 <- glm(score ~ Pt.group ,
data = lpost_data%>%filter(Pt.code != "10_control" & lpost == "Asmt.lpost.9"))
knitr::opts_chunk$set(echo = TRUE)
selection <- au_compromition(deficit)
deficit <- au_deficit[2] # surprise
load("../objects/mbs_circular.RData")
# Calculate mean intensity
correct_data <-  dataset_gw1 %>%
dplyr::select(Pt.code, Pt.match, Video.set, Video.emotion, Pt.group, Resp.correct) %>%
'colnames<-'(c("subject" ,"match","video_set", "emotion", "group", "correct"))
accuracy<-correct_data%>%
group_by(subject,match,group, emotion, video_set) %>%
summarise(correct = sum(correct),
acc = correct/8) # 8 = 4 video id * 2 blocks
au_deficit <- c("happiness","surprise","sadness","fear","disgust","anger")
deficit <- au_deficit[2] # surprise
selection <- au_compromition(deficit)
selection
deficit
devtools::load_all()
load("../objects/mbs_circular.RData")
# Calculate mean intensity
correct_data <-  dataset_gw1 %>%
dplyr::select(Pt.code, Pt.match, Video.set, Video.emotion, Pt.group, Resp.correct) %>%
'colnames<-'(c("subject" ,"match","video_set", "emotion", "group", "correct"))
accuracy<-correct_data%>%
group_by(subject,match,group, emotion, video_set) %>%
summarise(correct = sum(correct),
acc = correct/8) # 8 = 4 video id * 2 blocks
au_deficit <- c("happiness","surprise","sadness","fear","disgust","anger")
deficit <- au_deficit[2] # surprise
selection <- au_compromition(deficit)
selection
x<-correct_data%>%
mutate(correct = as.factor(correct),
video_set = as.factor(video_set))%>%
na.omit()%>% filter(emotion == deficit)
fitJF <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "JeFEE"), family = binomial)
p<-summary(fitJF)
pvalJF<- round(p$coefficients[2,4],3)
x<-x%>% filter(match %in% au_compromition(deficit))
fitA <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "ADFES"), family = binomial)
fitA <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "ADFES"), family = binomial)
fitJ <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "JeFEE"), family = binomial)
plot(allEffects(fitA),main = "surprise ADFES selected",
sub=paste0("p.value = ",pvalA))
plot(allEffects(fitJ),main = "surprise JeFEE selected",
sub=paste0("p.value = ",pvalJ))
x<-x%>% filter(match %in% au_compromition(deficit))
# fitA <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "ADFES"), family = binomial)
fitJ <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "JeFEE"), family = binomial)
# p<-summary(fitA)
# pvalA<- round(p$coefficients[2,4],3)
p<-summary(fitJ)
pvalJ<- round(p$coefficients[2,4],3)
p<-summary(fitJF)
pvalJF<- round(p$coefficients[2,4],3)
plot(allEffects(fitJ),main = "surprise JeFEE selected",
sub=paste0("p.value = ",pvalJ))
plot(allEffects(fitJ),main = "surprise JeFEE selected",
sub=paste0("p.value = ",pvalJ))
deficit <- au_deficit[4] # fear
selection <- au_compromition(deficit)
selection
# Adatta il modello di regressione logistica
x<-correct_data%>%
mutate(correct = as.factor(correct),
video_set = as.factor(video_set))%>%
na.omit()%>% filter(emotion == deficit)
fitAF <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "ADFES"), family = binomial)
fitJF <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "JeFEE"), family = binomial)
p<-summary(fitAF)
pvalAF<- round(p$coefficients[2,4],3)
p
pvalAF<- round(p$coefficients[2,4],3)
pvalAF
p<-summary(fitJF)
pvalJF<- round(p$coefficients[2,4],3)
pvalJF
x<-x%>% filter(match %in% au_compromition(deficit))
x
unique(x$subject)
x$group
x%>%
mutate(subject = parse_number(subject),
subject = ifelse(group == "moebius",subject, subject + 10 ))
x<-x%>%
mutate(subject = parse_number(as.character(subject)),
subject = ifelse(group == "moebius",subject, subject + 10 ))
x
x%>%
mutate(subject = parse_number(as.character(subject)),
subject = ifelse(group == "moebius",subject, subject + 10 ))
unique(x$subject)
x<-correct_data%>%
mutate(correct = as.factor(correct),
video_set = as.factor(video_set))%>%
na.omit()%>% filter(emotion == deficit)
unique(x$subject)
x<-correct_data%>%
mutate(correct = as.factor(correct),
video_set = as.factor(video_set))%>%
na.omit()%>% filter(emotion == deficit)%>%
mutate(subject = parse_number(as.character(subject)),
subject = ifelse(group == "moebius",subject, subject + 10 ))
x
View(x)
x<-x%>%
filter(subject %in% au_compromition(deficit))
unique(x$subject)
x<-x%>%
filter(subject != 3,subject != 4,subject != 6,subject != 7,subject != 8,subject != 10)
deficit <- au_deficit[6] # anger
selection <- au_compromition(deficit)
# Adatta il modello di regressione logistica
x<-correct_data%>%
mutate(correct = as.factor(correct),
video_set = as.factor(video_set))%>%
na.omit()%>% filter(emotion == deficit)
fitAF <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "ADFES"), family = binomial)
fitJF <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "JeFEE"), family = binomial)
p<-summary(fitAF)
pvalAF<- round(p$coefficients[2,4],3)
p<-summary(fitJF)
pvalJF<- round(p$coefficients[2,4],3)
x<-x%>% filter(subject != 5, subject != 7,subject != 8, subject != 10)
deficit
unique(x$subject)
x<-x%>% filter(subject != 5, subject != 7,subject != 8, subject != 10)
x<-x%>% filter(subject != 5, subject != 7,subject != 8, subject != 10)
unique(x$subject)
deficit <- au_deficit[4] # fear
selection <- au_compromition(deficit)
# Adatta il modello di regressione logistica
x<-correct_data%>%
mutate(correct = as.factor(correct),
video_set = as.factor(video_set))%>%
na.omit()%>% filter(emotion == deficit)%>%
mutate(subject = parse_number(as.character(subject)),
subject = ifelse(group == "moebius",subject, subject + 10 ))
fitAF <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "ADFES"), family = binomial)
fitJF <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "JeFEE"), family = binomial)
p<-summary(fitAF)
pvalAF<- round(p$coefficients[2,4],3)
p<-summary(fitJF)
pvalJF<- round(p$coefficients[2,4],3)
x<-x%>%
filter(subject != "3_moebius",subject != "4_moebius",subject != "6_moebius",subject != "7_moebius",subject != "8_moebius",subject != "10_moebius")
deficit
selection
x<-correct_data%>%
mutate(correct = as.factor(correct),
video_set = as.factor(video_set))%>%
na.omit()%>% filter(emotion == deficit)%>%
mutate(subject = parse_number(as.character(subject)),
subject = ifelse(group == "moebius",subject, subject + 10 ))
fitAF <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "ADFES"), family = binomial)
fitJF <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "JeFEE"), family = binomial)
p<-summary(fitAF)
pvalAF<- round(p$coefficients[2,4],3)
p<-summary(fitJF)
pvalJF<- round(p$coefficients[2,4],3)
pvalAF
pvalJF
x<-x%>%
filter(subject != "3_moebius",subject != "4_moebius",subject != "6_moebius",subject != "7_moebius",subject != "8_moebius",subject != "10_moebius")
unique(x$subject)
deficit <- au_deficit[5] # disgust
selection <- au_compromition(deficit)
# Adatta il modello di regressione logistica
x<-correct_data%>%
mutate(correct = as.factor(correct),
video_set = as.factor(video_set))%>%
na.omit()%>% filter(emotion == deficit)
fitAF <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "ADFES"), family = binomial)
fitJF <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "JeFEE"), family = binomial)
deficit
pvalAF
pvalJF
unique(x$subject)
p<-summary(fitAF)
p
selection
x$subject
demographic <- read.csv(file.path("original_data/demography/compromissionmean.csv"), sep = ",", header = TRUE, stringsAsFactors = FALSE, na.strings = "aa")
demographic <- read.csv(file.path("original_data/demography/compromissionmean.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE, na.strings = "aa")
palsymean <- read.csv(file.path("original_data/demography/compromissionmean.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE, na.strings = "aa")
palsymean
palsymean <- read.csv(file.path("original_data/demography/compromissionmean.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE, na.strings = "aa") %>%
group_by(Wheel.emotion,Pt.code) %>%
summarise(Palsy.score = mean_se(Palsy.score))
palsymean
palsymean <- read.csv(file.path("original_data/demography/compromissionmean.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE, na.strings = "aa") %>%
group_by(Wheel.emotion,Pt.code) %>%
summarise(Palsy.score = mean(Palsy.score))
palsymean
correct_data <-  dataset_gw1 %>%
dplyr::select(Pt.code, Pt.match, Video.set, Video.emotion, Pt.group, Resp.correct) %>%
'colnames<-'(c("subject" ,"match","video_set", "emotion", "group", "correct"))
accuracy<-correct_data%>%
group_by(subject,match,group, emotion, video_set) %>%
summarise(correct = sum(correct),
acc = correct/8) # 8
accuracy
palsymean
palsymean <- read.csv(file.path("original_data/demography/compromissionmean.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE, na.strings = "aa") %>%
group_by(Wheel.emotion,Pt.code) %>%
summarise(Palsy.score = mean(Palsy.score))%>%
'colnames<-'(c("emotion" ,"subject","Palsy.score"))
palsymean
palsymean <- read.csv(file.path("original_data/demography/compromissionmean.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE, na.strings = "aa") %>%
group_by(Wheel.emotion,Pt.code) %>%
summarise(Palsy.score = mean(Palsy.score))%>%
'colnames<-'(c("emotion" ,"subject","Palsy"))
palsymean <- read.csv(file.path("original_data/demography/compromissionmean.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE, na.strings = "aa") %>%
group_by(Wheel.emotion,Pt.code) %>%
summarise(Palsy.score = mean(Palsy.score))%>%
'colnames<-'(c("emotion" ,"subject","palsy"))
accuracy<-correct_data%>%
group_by(subject,match,group, emotion, video_set) %>%
summarise(correct = sum(correct),
acc = correct/8)
accuracy
correct_data
left_join(accuracy,palsymean, by = c("subject","emotion"))
temp <- left_join(accuracy,palsymean, by = c("subject","emotion"))
View(temp)
View(palsymean)
accuracy <- left_join(accuracy,palsymean, by = c("subject","emotion"))
View(accuracy)
au_deficit <- c("happiness","surprise","sadness","fear","disgust","anger")
deficit <- au_deficit[1]
x<-correct_data%>%
mutate(correct = as.factor(correct),
video_set = as.factor(video_set))%>%
na.omit()%>% filter( emotion == deficit)
fit <- glmer(correct ~ palsy  + (1|subject) , data = x, family = binomial)
correct_data <- left_join(correct_data,palsymean, by = c("subject","emotion"))
# Adatta il modello di regressione logistica
x<-correct_data%>%
mutate(correct = as.factor(correct),
video_set = as.factor(video_set))%>%
na.omit()%>% filter( emotion == deficit)
fit <- glmer(correct ~ palsy  + (1|subject) , data = x, family = binomial)
fit
summary(fit)
fit1 <- glmer(correct ~  palsy * video_set + (1|subject) , data = x, family = binomial)
anova(fit,fit1)
plot(allEffects(fit))
plot(allEffects(fit1))
knitr::opts_chunk$set(echo = TRUE)
load(file.path("objects","mbs_circular.RData"))
deficit <- au_deficit[6] # anger
selection <- au_compromition(deficit)
# Adatta il modello di regressione logistica
x<-correct_data%>%
mutate(correct = as.factor(correct),
video_set = as.factor(video_set))%>%
na.omit()%>% filter(emotion == deficit)
fitAF <- glmer(correct ~ palsy  + (1|subject) , data = x%>%filter(video_set == "ADFES"), family = binomial)
fitJF <- glmer(correct ~ palsy  + (1|subject) , data = x%>%filter(video_set == "JeFEE"), family = binomial)
p<-summary(fitAF)
pvalAF<- round(p$coefficients[2,4],3)
p<-summary(fitJF)
pvalJF<- round(p$coefficients[2,4],3)
deficit <- au_deficit[2] # surprise
selection <- au_compromition(deficit)
# Adatta il modello di regressione logistica
x<-correct_data%>%
mutate(correct = as.factor(correct),
video_set = as.factor(video_set))%>%
na.omit()%>% filter(emotion == deficit)
fitAF <- glmer(correct ~ group  + (1|subject) , data = x%>%filter(video_set == "ADFES"), family = binomial)
fitAF <- glmer(correct ~ palsy  + (1|subject) , data = x%>%filter(video_set == "ADFES"), family = binomial)
fitJF <- glmer(correct ~ palsy  + (1|subject) , data = x%>%filter(video_set == "JeFEE"), family = binomial)
p<-summary(fitAF)
pvalAF<- round(p$coefficients[2,4],3)
p<-summary(fitJF)
pvalJF<- round(p$coefficients[2,4],3)
plot(allEffects(fitAF),main = "surprise ADFES all subjects",
sub=paste0("p.value = ",pvalAF))
p
pvalAF
p
p<-summary(fitAF)
p
?head
head(correct_data, n = 5)
# dataset of resp count
correct_data <-  dataset_gw1 %>%
dplyr::select(Pt.code, Pt.match, Pt.group, Video.set, Video.emotion,  Resp.category) %>%
'colnames<-'(c("subject" ,"match", "group", "video_set", "emotion",  "response")) %>%
mutate( count = 1)
correct_data
# dataset of resp count
correct_data <-  dataset_gw1 %>%
dplyr::select(Pt.code, Pt.match, Pt.group, Video.set, Video.emotion,  Resp.category) %>%
'colnames<-'(c("subject" ,"match", "group", "video_set", "emotion",  "response"))
# dataset of resp count per subject
dataset_subject <- dataset %>%
group_by("subject" ,"match", "group", "video_set", "emotion",  "response") %>%
sumarise( count = n())
dataset <-  dataset_gw1 %>%
dplyr::select(Pt.code, Pt.match, Pt.group, Video.set, Video.emotion,  Resp.category) %>%
'colnames<-'(c("subject" ,"match", "group", "video_set", "emotion",  "response"))
# dataset of resp count per subject
dataset_subject <- dataset %>%
group_by("subject" ,"match", "group", "video_set", "emotion",  "response") %>%
summarise( count = n())
dataset_subject
dataset_subject <- dataset %>%
group_by(subject ,match, group, video_set, emotion, response) %>%
summarise( count = n())
dataset_subject
dataset_subject %>%
spread(count, response)
dataset_subject %>%
spread(response, count)
temp<-dataset_subject %>%
spread(response, count)
View(temp)
temp<-dataset_subject %>%
spread(response, count, fill = 0)
dataset_subject
# dataset of resp count per group
dataset_group <- dataset_subject %>%
group_by(match, group, video_set, emotion, response) %>%
summarise( count = mean(count)/8)
# table to matrix
temp<-dataset_group %>%
spread(response, count, fill = 0)
dataset_subject <- dataset %>%
group_by(subject, match, group, video_set, emotion, response) %>%
summarise( count = n()/8)
# dataset of resp count per group
dataset_group <- dataset_subject %>%
group_by(match, group, video_set, emotion, response) %>%
summarise( count = mean(count))
temp<-dataset_group %>%
spread(response, count, fill = 0)
library(tidyverse)
library(viridis)
install.packages("viridis")
library(viridis)
mtcars %>%
scale() %>%
as.data.frame()
mtcars %>%
scale() %>%
as.data.frame() %>%
rownames_to_column(var = "make")
mtcars %>%
scale() %>%
as.data.frame()
mtcars %>%
scale() %>%
as.data.frame() %>%
rownames_to_column(var = "make") %>%
gather(var, val, -make)
dataset_group %>%
scale()
dataset_group
dataset_group %>%
as.data.frame() %>%
ggplot(aes(response, emotion)) +
geom_tile(aes(fill = count)) +
geom_text(aes(label = round(count, 2)),
size = 3) +
coord_fixed() +
scale_fill_viridis() +
guides(fill = FALSE)
temp
# table to matrix
temp<-dataset_group %>%
spread(response, count, fill = 0) %>%
gather(response, count,-c(1:4))
temp
temp<-dataset_group %>%
spread(response, count, fill = 0) %>%
gather(response, count,-c(1:4)) %>%
as.data.frame() %>%
ggplot(aes(response, emotion)) +
geom_tile(aes(fill = count)) +
geom_text(aes(label = round(count, 2)),
size = 3) +
coord_fixed() +
scale_fill_viridis() +
guides(fill = FALSE)
dataset_group %>%
spread(response, count, fill = 0) %>%
gather(response, count,-c(1:4)) %>%
as.data.frame() %>%
ggplot(aes(response, emotion)) +
geom_tile(aes(fill = count)) +
geom_text(aes(label = round(count, 2)),
size = 3) +
coord_fixed() +
scale_fill_viridis() +
guides(fill = FALSE)
dataset_group %>%
spread(response, count, fill = 0) %>%
gather(response, count,-c(1:4)) %>%
mutate(count = count*100) %>%
as.data.frame() %>%
ggplot(aes(response, emotion)) +
geom_tile(aes(fill = count)) +
geom_text(aes(label = round(count, 2)),
size = 3) +
coord_fixed() +
scale_fill_viridis() +
guides(fill = FALSE)
dataset_group %>%
spread(response, count, fill = 0) %>%
gather(response, count,-c(1:4)) %>%
mutate(count = count*100) %>%
as.data.frame() %>%
ggplot(aes(response, emotion)) +
geom_tile(aes(fill = count)) +
geom_text(aes(label = round(count, 2)),
size = 3) +
coord_fixed() +
scale_fill_viridis() +
guides(fill = FALSE) +
facet_grid(group ~ .)
View(coords)
coords$emo_order
dataset_group %>%
spread(response, count, fill = 0) %>%
gather(response, count,-c(1:4)) %>%
mutate(count = count*100,
response = factor(response, levels = c("pride", "elation", "happiness", "satisfaction", "relief", "hope", "interest", "surprise",
"sadness", "fear", "shame", "guilt", "envy", "disgust", "contempt", "anger", "no resp")),
emotion = factor(emotion, levels = c("happiness", "surprise", "sadness", "fear", "disgust", "anger"))) %>%
as.data.frame() %>%
ggplot(aes(response, emotion)) +
geom_tile(aes(fill = count)) +
geom_text(aes(label = round(count, 2)),
size = 3) +
coord_fixed() +
scale_fill_viridis() +
guides(fill = FALSE) +
facet_grid(group ~ .)
dataset_group %>%
spread(response, count, fill = 0) %>%
gather(response, count,-c(1:4)) %>%
mutate(count = count*100,
response = factor(response, levels = c("pride", "elation", "happiness", "satisfaction", "relief", "hope", "interest", "surprise",
"sadness", "fear", "shame", "guilt", "envy", "disgust", "contempt", "anger", "no resp")),
emotion = factor(emotion, levels = c("happiness", "surprise", "sadness", "fear", "disgust", "anger"))) %>%
as.data.frame() %>%
ggplot(aes(response, emotion)) +
geom_tile(aes(fill = count)) +
geom_text(aes(label = round(count, 2)),
size = 3) +
coord_fixed() +
scale_fill_viridis() +
guides(fill = FALSE) +
facet_grid(group ~ .)
dataset_group <- dataset_subject %>%
group_by(group, video_set, emotion, response) %>%
summarise( count = mean(count))
dataset_group %>%
spread(response, count, fill = 0) %>%
gather(response, count,-c(1:4)) %>%
mutate(count = count*100,
response = factor(response, levels = c("pride", "elation", "happiness", "satisfaction", "relief", "hope", "interest", "surprise",
"sadness", "fear", "shame", "guilt", "envy", "disgust", "contempt", "anger", "no resp")),
emotion = factor(emotion, levels = c("happiness", "surprise", "sadness", "fear", "disgust", "anger"))) %>%
as.data.frame() %>%
ggplot(aes(response, emotion)) +
geom_tile(aes(fill = count)) +
geom_text(aes(label = round(count, 2)),
size = 3) +
coord_fixed() +
scale_fill_viridis() +
guides(fill = FALSE) +
facet_grid(group ~ .)
dataset_group
dataset_group %>%
spread(response, count, fill = 0) %>%
gather(response, count,-c(1:4)) %>%
mutate(count = count*100,
response = factor(response, levels = c("pride", "elation", "happiness", "satisfaction", "relief", "hope", "interest", "surprise",
"sadness", "fear", "shame", "guilt", "envy", "disgust", "contempt", "anger", "no resp")),
emotion = factor(emotion, levels = c("happiness", "surprise", "sadness", "fear", "disgust", "anger"))) %>%
as.data.frame() %>%
ggplot(aes(response, emotion)) +
geom_tile(aes(fill = count)) +
geom_text(aes(label = round(count, 2)),
size = 3) +
coord_fixed() +
scale_fill_viridis() +
guides(fill = FALSE) +
facet_grid(group ~ video_set)
