Resp.angle.mean,Resp.angle.sd,
Resp.diff.mean,Resp.diff.sd,
Resp.intensity.mean,Resp.intensity.sd)%>%
mutate(Wheel.angle = paste0(as.character(round(Wheel.angle,2)),"°"),
Resp.angle.mean = paste0(as.character(round(Resp.angle.mean,2)),"°"),
Resp.angle.sd = paste0(as.character(round(Resp.angle.sd,2)),"°"),
Resp.diff.mean = paste0(as.character(round(Resp.diff.mean,2)),"°"),
Resp.diff.sd = paste0(as.character(round(Resp.diff.sd,2)),"°"),
Resp.intensity.mean = round(Resp.intensity.mean,2),
Resp.intensity.sd = round(Resp.intensity.sd,2))%>%
'colnames<-'(c("GEW","Emotion","Angle reference",
"Group" ,"Set",
"Response angle", "Response variance",
"Bias","Uncertainty",
"Mean (px)", "Sd"))
# dataset nemotions for flextable object
dat_gw2 <- dataset_full%>%
filter(Wheel.task == "task",Wheel.name == "GW2", Pt.code != "10_moebius" ,Video.emotion != "neutrality")%>%
drop_na(Resp.angle)%>%
dplyr::select(Wheel.name,Pt.code,Pt.group,Video.emotion,Video.set,Wheel.angle,Resp.angle,Resp.diff,Resp.intensity)%>%
group_by(Wheel.name,Video.emotion,Wheel.angle,Pt.group,Video.set)%>%
summarise(Resp.angle.mean = rad_to_deg(CircStats::circ.mean(Resp.angle)) %% 360,
Wheel.angle.mean = "0°",
Resp.angle.sd = 1 - CircStats::circ.disp(Resp.angle)$var,
Resp.intensity.mean = mean(Resp.intensity, na.rm=TRUE),
Resp.intensity.sd = sd(Resp.intensity, na.rm=TRUE),
Resp.diff.mean = NA,
Resp.diff.sd = NA)%>%
ungroup()%>%
dplyr::select(Wheel.name,Video.emotion,Wheel.angle.mean,
Pt.group,Video.set,
Resp.angle.mean,Resp.angle.sd,
Resp.diff.mean,Resp.diff.sd,
Resp.intensity.mean,Resp.intensity.sd)%>%
mutate(Resp.angle.mean = paste0(as.character(round(Resp.angle.mean,2)),"°"),
Resp.angle.sd = paste0(as.character(round(Resp.angle.sd,2)),"°"),
Resp.intensity.mean = round(Resp.intensity.mean,2),
Resp.intensity.sd = round(Resp.intensity.sd,2))%>%
'colnames<-'(c("GEW","Emotion","Angle reference",
"Group" ,"Set",
"Response angle", "Response variance",
"Bias","Uncertainty",
"Mean (px)", "Sd"))
Responses_table <- rbind(dat_neutral,dat_gw1,dat_gw2)%>%
arrange(GEW,Emotion,Group,Set)%>%
flextable() %>%
autofit() %>%
theme_vanilla() %>%
fontsize(part = "all", size = 9)%>%
merge_v(j = c(1:5))%>%
add_header_row(colwidths = c(5, 4,2),
values = c("Genova Emotion Wheel","Responses", "Perceived Intensity") )%>%
align(align = "center", part = "all")
# neutral resp & GEW Plots ---------------------------------------------------------------
bg <- magick::image_read("files/gew_low_res.png")
bg <- magick::image_modulate(bg, brightness = 80)
gew_legend <- coords %>%
mutate(mask = "Legend",
flip = ifelse(x_emo < 0, degree_emo + 180, degree_emo),
emotion = stringr::str_to_title(emotion)) %>%
ggplot() +
ggpubr::background_image(bg) +
geom_text(aes(x = x_emo*0.75, y = y_emo*0.75,
label = emotion,
angle = flip),
size = 5.5, fontface = "bold",
check_overlap = TRUE) +
facet_grid(. ~ mask) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
strip.text.y = element_text(size = 20, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA)) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300))
neutral_plot <- dataset_full %>%
filter(Video.emotion == "neutrality") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
ggh4x::facet_nested(Video.set ~ Video.emotion, switch="y") +
geom_point(alpha = 0.5, show.legend = TRUE, size = 3) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300))+
guides(shape = guide_legend(title = "Pt.group")) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 20, face = "bold"),
strip.text.y = element_text(size = 20, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
facet_grid(Wheel.name ~ Video.set)+
guides(color = guide_legend(title = "Group"),
shape = guide_legend(title = "Group"))
plot_gew_legend_neutral <- cowplot::plot_grid(neutral_plot, gew_legend, labels = "AUTO")
# Responses Plots Gw1 & Gw2 ---------------------------------------------------------------
plot_gew_emotions_gw1 <- dataset_full %>%
filter(Video.emotion != "neutrality", Wheel.task == "task", Wheel.name == "GW1") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
geom_point(alpha = 0.5, size = 1) +
ggh4x::facet_nested(  Video.emotion + Video.set  ~  Pt.match) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300)) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 10, face = "bold"),
strip.text.y = element_text(size = 10, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
scale_fill_manual(values = c("NA", "white"))
plot_gew_emotions_gw2 <- dataset_full %>%
filter(Video.emotion != "neutrality", Wheel.task == "task", Wheel.name == "GW2") %>%
ggplot(aes(x = Wheel.x, y = Wheel.y, shape = Pt.group, color = Pt.group)) +
ggpubr::background_image(bg) +
geom_point(alpha = 0.5, size = 1) +
ggh4x::facet_nested(  Video.emotion + Video.set  ~  Pt.match) +
coord_fixed(xlim = c(-300, 300), ylim = c(-300, 300)) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 10, face = "bold"),
strip.text.y = element_text(size = 10, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
legend.position = "bottom")+
scale_fill_manual(values = c("NA", "white"))
# Saving
save(plot_gew_legend_neutral,plot_gew_emotions_gw1,plot_gew_emotions_gw2,gew_legend,Responses_table,demogaphic_tbl_summary,demogaphic_tbl_full,file = file.path("objects", "mbs_info.RData"))
knitr::opts_chunk$set(echo = TRUE)
load("../models/mbs_info.RData")
###########################################################################
#
#  Experiment:  CARIPARO
#  Programmer:  QUETTIER THOMAS
#  Date:        0382022
#     This script performs data analysis for the CARIPARO experiment,
#     specifically for the Accuracy measure of the MBScontrol experiment.
#     It computes datasets, generates plots, tables, and fits a
#     mixed-effects model to analyze the response Accuracy.
#
#  Experiment   MBScontrol
#
#  Update:      23/05/2023
###########################################################################
rm(list=ls()) # remove all objects
# Functions & libraries---------------------------------------------------------------
devtools::load_all()
# Data --------------------------------------------------------------------
load(file.path("objects","mbs_circular.RData"))
# Calculate mean intensity
correct_data <-  dataset_gw1 %>%
dplyr::select(Pt.code,  Video.set, Video.emotion, Pt.group, Resp.correct) %>%
'colnames<-'(c("subject" ,"video_set", "emotion", "group", "correct"))
accuracy<-correct_data%>%
group_by(subject, group, emotion, video_set) %>%
summarise(correct = sum(correct),
acc = correct/8) # 8 = 4 video id * 2 blocks
# Plot accuracy GWE 1 vs GWE 2 ----------------------------------------------
dat_summ <- dataset_full %>%
filter( Video.emotion != "neutrality" ) %>% # no match
drop_na(Video.emotion)%>%
mutate(count = 1)%>%
group_by(Pt.code,Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = sum(count))%>%
group_by(Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = mean(n))
dat_summ %>%
filter(Wheel.name == "GW1" )%>%
mutate(Video.set = stringr::str_to_title(Video.set))%>%
plotaccuracy()
dat_summ%>%filter(Video.emotion == "surprise", Pt.group == "control", Video.set == "ADFES" )
dat_summ%>%filter(Video.emotion == "surprise", Pt.group == "control", Video.set == "ADFES", Wheel.name == "GW1" )
dat_summ <- dataset_full %>%
filter( Video.emotion != "neutrality" ) %>% # no match
drop_na(Video.emotion)%>%
mutate(count = 1)%>%
group_by(Pt.code,Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = sum(count))
dat_summ%>%filter(Video.emotion == "surprise", Pt.group == "control", Video.set == "ADFES", Wheel.name == "GW1" )
table_accuracy <- accuracy %>%
group_by(group,emotion, video_set) %>%
summarise(acc = mean(acc, na.rm = TRUE)) %>%
pivot_wider(names_from = emotion, values_from = acc) %>%
flextable() %>%
#colformat_double(digits = 2) %>%
autofit() %>%
merge_v(j = 1:2) %>%
theme_vanilla() %>%
align(align = "center")
table_accuracy
accuracy<-correct_data%>%
group_by(subject, group, emotion, video_set) %>%
summarise(correct = sum(correct),
acc = correct/8)
accuracy
dat_summ <- dataset_full %>%
filter( Video.emotion != "neutrality" , Wheel.task == "task") %>% # no match
drop_na(Video.emotion)%>%
mutate(count = 1)%>%
group_by(Pt.code,Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = sum(count))%>%
group_by(Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = mean(n))
dat_summ%>%filter(Video.emotion == "surprise", Pt.group == "control", Video.set == "ADFES", Wheel.name == "GW1" )
plot_freq_gw1 <- dat_summ %>%
filter(Wheel.name == "GW1" )%>%
mutate(Video.set = stringr::str_to_title(Video.set))%>%
plotaccuracy()
plot_freq_gw2 <- dat_summ %>%
filter(Wheel.name == "GW2" )%>%
mutate(Video.set = stringr::str_to_title(Video.set))%>%
plotaccuracy()
plot_freq_gw1
plot_freq_gw2 <- dat_summ %>%
filter(Wheel.name == "GW2" )%>%
mutate(Video.set = stringr::str_to_title(Video.set))%>%
plotaccuracy()
table_accuracy <- accuracy %>%
group_by(group,emotion, video_set) %>%
summarise(acc = mean(acc, na.rm = TRUE)) %>%
pivot_wider(names_from = emotion, values_from = acc) %>%
flextable() %>%
colformat_double(digits = 2) %>%
autofit() %>%
merge_v(j = 1:2) %>%
theme_vanilla() %>%
align(align = "center")
###########################################################################
#
#  Experiment:  CARIPARO
#  Programmer:  QUETTIER THOMAS
#  Date:        0382022
#     This script performs data analysis for the CARIPARO experiment,
#     specifically for the Accuracy measure of the MBScontrol experiment.
#     It computes datasets, generates plots, tables, and fits a
#     mixed-effects model to analyze the response Accuracy.
#
#  Experiment   MBScontrol
#
#  Update:      23/05/2023
###########################################################################
rm(list=ls()) # remove all objects
# Functions & libraries---------------------------------------------------------------
devtools::load_all()
# Data --------------------------------------------------------------------
load(file.path("objects","mbs_circular.RData"))
# Calculate mean intensity
correct_data <-  dataset_gw1 %>%
dplyr::select(Pt.code,  Video.set, Video.emotion, Pt.group, Resp.correct) %>%
'colnames<-'(c("subject" ,"video_set", "emotion", "group", "correct"))
accuracy<-correct_data%>%
group_by(subject, group, emotion, video_set) %>%
summarise(correct = sum(correct),
acc = correct/8) # 8 = 4 video id * 2 blocks
# Plot accuracy GWE 1 vs GWE 2 ----------------------------------------------
dat_summ <- dataset_full %>%
filter( Video.emotion != "neutrality" , Wheel.task == "task") %>% # no match
drop_na(Video.emotion)%>%
mutate(count = 1)%>%
group_by(Pt.code,Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = sum(count))%>%
group_by(Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = mean(n))
dat_summ%>%filter(Video.emotion == "surprise", Pt.group == "control", Video.set == "ADFES", Wheel.name == "GW1" )
plot_freq_gw1 <- dat_summ %>%
filter(Wheel.name == "GW1" )%>%
mutate(Video.set = stringr::str_to_title(Video.set))%>%
plotaccuracy()
plot_freq_gw2 <- dat_summ %>%
filter(Wheel.name == "GW2" )%>%
mutate(Video.set = stringr::str_to_title(Video.set))%>%
plotaccuracy()
# Accuracy GEW ------------------------------------------------------------
table_accuracy <- accuracy %>%
group_by(group,emotion, video_set) %>%
summarise(acc = mean(acc, na.rm = TRUE)) %>%
pivot_wider(names_from = emotion, values_from = acc) %>%
flextable() %>%
colformat_double(digits = 2) %>%
autofit() %>%
merge_v(j = 1:2) %>%
theme_vanilla() %>%
align(align = "center")
# Fit  correct for each emotion--------------------------------------------
# Adatta il modello di regressione logistica
x<-correct_data%>%
mutate(correct = as.factor(correct),
video_set = as.factor(video_set))%>%
na.omit()
fit <- glmer(correct ~ emotion * group * video_set + (1|subject) , data = x, family = binomial)
fit_mixed<- mixed(correct ~ emotion * group * video_set + (1|subject) ,method = "LRT", data = x, family = binomial, expand_re = TRUE)
#fit_pb<- mixed(correct ~ emotion * group * video_set + (1|subject) ,method = "PB", data = x, family = binomial, expand_re = TRUE)
# Generate table summary
table <- tab_model(fit ) #, show.df = FALSE, string.p = "p adjusted", p.adjust = "bonferroni")
# Create ANOVA table
# Perform ANOVA
chiquadro <- car::Anova(fit, type = 3)
# chiquadro <- anova(fit) # car::Anova
# summary(chiquadro)$coefficients
chi_table <- chiquadro %>%
kbl(caption = "correct ~ emotion * group * video_set, p-values via partial sums of squares, Accuracy n=20") %>%
column_spec(4, color = ifelse(chiquadro$`Pr(>Chisq)` <= 0.05, "red", "black")) %>%
kable_classic(full_width = F, html_font = "Cambria")
LRT_table <- fit_mixed$anova_table %>%
kbl(caption = "correct ~ emotion * group * video_set, p-values via the likelihood ratio tests, Accuracy n=20") %>%
column_spec(5, color = ifelse(fit_mixed$anova_table$`Pr(>Chisq)` <= 0.05, "red", "black")) %>%
kable_classic(full_width = F, html_font = "Cambria")
# interaction<- testInteractions(fit, pairwise = "group", fixed = c("video_set", "emotion"), adjustment = "fdr")
# interaction2<- testInteractions(fit, pairwise = "group", fixed = c("video_set", "emotion"))
#Contrasts
emotion<-emmeans(fit_mixed, pairwise ~ emotion)
tabella_emotion <- data.frame(as.data.frame(summary(emotion)$contrasts))
video_set<-emmeans(fit_mixed, pairwise ~ video_set)
tabella_video_set <- data.frame(as.data.frame(summary(video_set)$contrasts))
emotion_group<-emmeans(fit_mixed, pairwise ~ group|emotion)
tabella_emotion_group <- data.frame(as.data.frame(summary(emotion_group)$contrasts))
emotion_video_set<-emmeans(fit_mixed, pairwise ~ video_set|emotion)
tabella_emotion_video_set <- data.frame(as.data.frame(summary(emotion_video_set)$contrasts))
emotion_group_video_set<-emmeans(fit_mixed, pairwise ~ group|emotion|video_set)
tabella_emotion_group_video_set <- data.frame(as.data.frame(summary(emotion_group_video_set)$contrasts))
contrasts <- rbind(tabella_emotion%>%mutate(video_set = "all",emotion = NA, effect = "emotion"),
tabella_video_set%>%mutate(video_set = NA,emotion = "all", effect = "video_set"),
tabella_emotion_group%>%mutate(video_set = "all", effect = "emotion|group"),
tabella_emotion_video_set%>%mutate(video_set = NA, effect = "emotion|video_set"),
tabella_emotion_group_video_set%>%mutate(effect = "group|emotion|video_set"))%>%
select(effect,video_set, emotion, contrast, estimate, SE, df, z.ratio, p.value)
# kable table object
options(knitr.kable.NA = '')
contrast<-contrasts%>%
mutate_if(is.numeric,~round(., digits = 4)) %>%
kbl(caption = "Contrasts (no corrected)") %>%
column_spec(9, color = ifelse(contrasts$p.value <= 0.05, "red", "black")) %>%
kable_classic(full_width = F, html_font = "Cambria")
# Generate model plot
#explorative plots
flex_emotion <- flexplot(correct~emotion | video_set*group, data= x)
flex_video <- flexplot(correct~video_set, data= x)
flex_plot <- cowplot::plot_grid(video_set,emotion,  nrow = 2)
# plot
themeperso <- theme_paper(font_size = 10) +
theme(legend.position = "bottom")
plotemotion <- ggpredict(fit, terms = c( "emotion"))%>%
plot()+
labs(title = "Main effect emotion",
x = "Emotions",
y = "Accuracy") +
themeperso
plotvideo <- ggpredict(fit, terms = c( "video_set"))%>%
plot()+
labs(title = "Main effect Video set",
x = "Emotions",
y = "Accuracy") +
themeperso
plotemogroup <- ggpredict(fit, terms = c("emotion", "group")) %>%
plot() +
labs(
title = "Interaction  group * emotion",
x = "Emotions",
y = "Accuracy") +
themeperso
plotemovideo <- ggpredict(fit, terms = c( "emotion", "video_set"))%>%
plot()+
labs(title = "Interaction video set * emotion",
x = "Emotions",
y = "Accuracy") +
themeperso
plotint3 <- ggpredict(fit, terms = c( "emotion", "group","video_set"))%>%
plot()+
labs(title = "Effetti interaction group * emotion * video_set",
x = "Emotions",
y = "Accuracy") +
themeperso
ploteffect<-cowplot::plot_grid(plotemotion,
plotvideo,
plotemogroup,
plotemovideo,
plotint3,
ncol = 1,
scale = c(.9, .9, .9, .9,.9))
# Save the results
save(fit, table, chi_table,LRT_table, contrast, ploteffect,table_accuracy, plot_freq_gw1, plot_freq_gw2,  file = file.path("models","accuracy.RData"))
#################################################
#
# END
#
######################################## accuracy
dat_summ
plot_freq_gw1
dataset_full %>%
filter( Video.emotion != "neutrality" , Wheel.task == "task") %>% # no match
drop_na(Video.emotion)%>%
mutate(count = 1)%>%
group_by(Pt.code,Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = sum(count))
dat_summ <- dataset_full %>%
filter( Video.emotion != "neutrality" , Wheel.task == "task") %>% # no match
drop_na(Video.emotion)%>%
mutate(count = 1)%>%
group_by(Pt.code,Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = sum(count))
dat_summ %>%
filter(Wheel.name == "GW1" )
dat_summ <- dataset_full %>%
filter( Video.emotion != "neutrality" , Wheel.task == "task") %>% # no match
drop_na(Video.emotion)%>%
mutate(count = 1)%>%
group_by(Pt.code,Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = sum(count))%>%
group_by(Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = n/18)
plot_freq_gw1 <- dat_summ %>%
filter(Wheel.name == "GW1" )%>%
mutate(Video.set = stringr::str_to_title(Video.set))%>%
plotaccuracy()
plot_freq_gw1
dat_summ %>%
filter(Wheel.name == "GW1" )
dataset_full %>%
filter( Video.emotion != "neutrality" , Wheel.task == "task") %>% # no match
drop_na(Video.emotion)%>%
mutate(count = 1)%>%
group_by(Pt.code,Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = sum(count))
dat_summ <- dataset_full %>%
filter( Video.emotion != "neutrality" , Wheel.task == "task") %>% # no match
drop_na(Video.emotion)%>%
mutate(count = 1)%>%
group_by(Pt.code,Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = sum(count))
dat_summ%>%filter(Video.emotion == "surprise", Pt.group == "control", Video.set == "ADFES", Wheel.name == "GW1" )
dat_summ%>%filter( Wheel.name == "GW1" )
dat_summ%>%filter(Video.emotion == "anger")
###########################################################################
#
#  Experiment:  CARIPARO
#  Programmer:  QUETTIER THOMAS
#  Date:        0382022
#     This script performs data analysis for the CARIPARO experiment,
#     specifically for the Accuracy measure of the MBScontrol experiment.
#     It computes datasets, generates plots, tables, and fits a
#     mixed-effects model to analyze the response Accuracy.
#
#  Experiment   MBScontrol
#
#  Update:      23/05/2023
###########################################################################
rm(list=ls()) # remove all objects
# Functions & libraries---------------------------------------------------------------
devtools::load_all()
# Data --------------------------------------------------------------------
load(file.path("objects","mbs_circular.RData"))
# Calculate mean intensity
correct_data <-  dataset_gw1 %>%
dplyr::select(Pt.code,  Video.set, Video.emotion, Pt.group, Resp.correct) %>%
'colnames<-'(c("subject" ,"video_set", "emotion", "group", "correct"))
accuracy<-correct_data%>%
group_by(subject, group, emotion, video_set) %>%
summarise(correct = sum(correct),
acc = correct/8) # 8 = 4 video id * 2 blocks
# Plot accuracy GWE 1 vs GWE 2 ----------------------------------------------
dat_summ <- dataset_full %>%
filter( Video.emotion != "neutrality" , Wheel.task == "task") %>% # no match
drop_na(Video.emotion)%>%
mutate(count = 1)%>%
group_by(Pt.code,Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = sum(count))%>%
group_by(Video.emotion,Video.set,Wheel.name, Resp.category,Pt.group) %>%
summarise(n = mean(n))
plot_freq_gw1 <- dat_summ %>%
filter(Wheel.name == "GW1" )%>%
mutate(Video.set = stringr::str_to_title(Video.set))%>%
plotaccuracy()
plot_freq_gw2 <- dat_summ %>%
filter(Wheel.name == "GW2" )%>%
mutate(Video.set = stringr::str_to_title(Video.set))%>%
plotaccuracy()
# Accuracy GEW ------------------------------------------------------------
table_accuracy <- accuracy %>%
group_by(group,emotion, video_set) %>%
summarise(acc = mean(acc, na.rm = TRUE)) %>%
pivot_wider(names_from = emotion, values_from = acc) %>%
flextable() %>%
colformat_double(digits = 2) %>%
autofit() %>%
merge_v(j = 1:2) %>%
theme_vanilla() %>%
align(align = "center")
# Fit  correct for each emotion--------------------------------------------
# Adatta il modello di regressione logistica
x<-correct_data%>%
mutate(correct = as.factor(correct),
video_set = as.factor(video_set))%>%
na.omit()
fit <- glmer(correct ~ emotion * group * video_set + (1|subject) , data = x, family = binomial)
fit_mixed<- mixed(correct ~ emotion * group * video_set + (1|subject) ,method = "LRT", data = x, family = binomial, expand_re = TRUE)
fit_pb<- mixed(correct ~ emotion * group * video_set + (1|subject) ,method = "PB", data = x, family = binomial, expand_re = TRUE)
